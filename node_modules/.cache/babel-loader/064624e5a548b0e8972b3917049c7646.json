{"ast":null,"code":"var _jsxFileName = \"/Users/minhtran/Desktop/react-tic-tac-toe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Board } from './components/Board';\nimport { ResetButton } from './components/ResetButton';\nimport { ScoreBoard } from './components/ScoreBoard';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6], [3, 5, 7]];\n  const [xPlaying, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(12).fill(null));\n  const [scores, setScores] = useState({\n    xScore: 0,\n    oScore: 0\n  });\n  const [gameOver, setGameOver] = useState(false);\n\n  const handleBoxClick = boxIdx => {\n    // Step 1: Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return xPlaying ? 'X' : 'O';\n      } else {\n        return value;\n      }\n    });\n    setBoard(updatedBoard); // Step 2: Check if either player has won the game\n\n    const winner = checkWinner(updatedBoard);\n\n    if (winner) {\n      if (winner === 'O') {\n        let {\n          oScore\n        } = scores;\n        oScore += 1;\n        setScores({ ...scores,\n          oScore\n        });\n      } else {\n        let {\n          xScore\n        } = scores;\n        xScore += 1;\n        setScores({ ...scores,\n          xScore\n        });\n      }\n    } // Step 3: Change active player\n\n\n    setXPlaying(!xPlaying);\n  };\n\n  const checkWinner = board => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i]; // Iterate through win conditions and check if either player satisfies them\n\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n\n  const resetBoard = () => {\n    setGameOver(false);\n    setBoard(Array(12).fill(null));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ScoreBoard, {\n      scores: scores,\n      xPlaying: xPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      onClick: gameOver ? resetBoard : handleBoxClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n      resetBoard: resetBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"1Un38VicP/Gli6PzhPFOYI4KHAw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/minhtran/Desktop/react-tic-tac-toe/src/App.js"],"names":["React","useState","Board","ResetButton","ScoreBoard","App","WIN_CONDITIONS","xPlaying","setXPlaying","board","setBoard","Array","fill","scores","setScores","xScore","oScore","gameOver","setGameOver","handleBoxClick","boxIdx","updatedBoard","map","value","idx","winner","checkWinner","i","length","x","y","z","resetBoard"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { Board } from './components/Board';\nimport { ResetButton } from './components/ResetButton';\nimport { ScoreBoard } from './components/ScoreBoard';\nimport './App.css';\n\nconst App = () => {\n\tconst WIN_CONDITIONS = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6],\n\t\t[3, 5, 7],\n\t];\n\n\tconst [xPlaying, setXPlaying] = useState(true);\n\tconst [board, setBoard] = useState(Array(12).fill(null));\n\tconst [scores, setScores] = useState({ xScore: 0, oScore: 0 });\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tconst handleBoxClick = boxIdx => {\n\t\t// Step 1: Update the board\n\t\tconst updatedBoard = board.map((value, idx) => {\n\t\t\tif (idx === boxIdx) {\n\t\t\t\treturn xPlaying ? 'X' : 'O';\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t});\n\n\t\tsetBoard(updatedBoard);\n\n\t\t// Step 2: Check if either player has won the game\n\t\tconst winner = checkWinner(updatedBoard);\n\n\t\tif (winner) {\n\t\t\tif (winner === 'O') {\n\t\t\t\tlet { oScore } = scores;\n\t\t\t\toScore += 1;\n\t\t\t\tsetScores({ ...scores, oScore });\n\t\t\t} else {\n\t\t\t\tlet { xScore } = scores;\n\t\t\t\txScore += 1;\n\t\t\t\tsetScores({ ...scores, xScore });\n\t\t\t}\n\t\t}\n\n\t\t// Step 3: Change active player\n\t\tsetXPlaying(!xPlaying);\n\t};\n\n\tconst checkWinner = board => {\n\t\tfor (let i = 0; i < WIN_CONDITIONS.length; i++) {\n\t\t\tconst [x, y, z] = WIN_CONDITIONS[i];\n\n\t\t\t// Iterate through win conditions and check if either player satisfies them\n\t\t\tif (board[x] && board[x] === board[y] && board[y] === board[z]) {\n\t\t\t\tsetGameOver(true);\n\t\t\t\treturn board[x];\n\t\t\t}\n\t\t}\n\t};\n\n\tconst resetBoard = () => {\n\t\tsetGameOver(false);\n\t\tsetBoard(Array(12).fill(null));\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<ScoreBoard scores={scores} xPlaying={xPlaying} />\n\t\t\t<Board\n\t\t\t\tboard={board}\n\t\t\t\tonClick={gameOver ? resetBoard : handleBoxClick}\n\t\t\t/>\n\t\t\t<ResetButton resetBoard={resetBoard} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}